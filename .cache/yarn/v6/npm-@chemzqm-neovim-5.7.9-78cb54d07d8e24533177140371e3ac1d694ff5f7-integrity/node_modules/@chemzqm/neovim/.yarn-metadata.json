{
  "manifest": {
    "name": "@chemzqm/neovim",
    "description": "NodeJS client API for vim8 and neovim",
    "version": "5.7.9",
    "homepage": "https://github.com/chemzqm/node-client",
    "authors": [
      {
        "name": "Billy Vong",
        "email": "github@mmo.me"
      },
      {
        "name": "rhysd",
        "email": "lin90162@yahoo.co.jp"
      },
      {
        "name": "Thiago de Arruda",
        "email": "tpadilha84@gmail.com"
      },
      {
        "name": "Qiming Zhao",
        "email": "chemzqm@gmail.com"
      }
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/chemzqm/node-client"
    },
    "bugs": {
      "url": "https://github.com/chemzqm/node-client/issues"
    },
    "license": "MIT",
    "files": [
      "lib/"
    ],
    "main": "./lib/index",
    "dependencies": {
      "msgpack-lite": "^0.1.26"
    },
    "devDependencies": {
      "@types/jest": "^27.4.0",
      "@types/msgpack-lite": "^0.1.8",
      "@types/node": "^17.0.14",
      "@types/which": "^2.0.1",
      "jest": "^27.4.7",
      "ts-jest": "^27.1.3",
      "typescript": "^4.5.5",
      "which": "^2.0.2"
    },
    "scripts": {
      "prepare": "yarn build",
      "test": "jest",
      "test-build": "npm run build && npm run prep-integration-test && jest --runInBand --coverage",
      "build": "tsc --pretty -p tsconfig.json",
      "watch": "tsc --pretty -p tsconfig.json --watch true"
    },
    "jest": {
      "moduleFileExtensions": [
        "ts",
        "tsx",
        "js",
        "jsx",
        "json",
        "node"
      ],
      "transform": {
        "^.+\\.tsx?$": "ts-jest"
      },
      "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.ts$",
      "coverageDirectory": "./coverage/"
    },
    "keywords": [
      "neovim",
      "neovim-client",
      "node-host",
      "node-client",
      "nvim",
      "nvim-client",
      "vim"
    ],
    "_registry": "npm",
    "_loc": "/home/ditya/.cache/yarn/v6/npm-@chemzqm-neovim-5.7.9-78cb54d07d8e24533177140371e3ac1d694ff5f7-integrity/node_modules/@chemzqm/neovim/package.json",
    "readmeFilename": "README.md",
    "readme": "# neovim-client\n\nFork of [neovim/node-client](https://github.com/neovim/node-client) which works\non both vim8 and neovim.\n\nCurrently works on node >= 8.\n\nThis module is used by [coc.nvim](https://github.com/neoclide/coc.nvim), you can\nthis module to create extension for vim8 and neovim, but it's recommended to\nbuild extension for coc.nvim.\n\n## Installation\n\nInstall the `neovim` package globally using `npm`.\n\n```sh\nnpm install -g @chemzqm/neovim\n```\n\n## Build from source code\n\nGit clone then run `yarn install`.\n\n## API\n\n```typescript\nimport {attach, NeovimClient} from '@chemzqm/neovim'\n// attach option could be ReadableStream & WritableStream or ChildProcess or socket string\nconst nvim: NeovimClient = attach({\n  reader: process.stdin,\n  writer: process.stdout\n})\n// current buffer object\nlet buf = await nvim.buffer\n// current window object\nlet win = await nvim.window\n// current tabpage object\nlet tabpage = await nvim.tabpage\n```\n\n## Debug on vim8\n\nBuild this module from source code, in root of project folder,\nstart the server by command: `vim -u mini.vim`.\n\nCheckout the vim8's log file by `:Openlog` command.\n\nCheckout log of node-client by open the file `$XDG_RUNTIME_DIR/node-client.log`.\n\nTo change the behavior, change the file `mini.vim` and `./bin/server.js` which\nare used for test purpose.\n\n## Debugging / troubleshooting\n\nDefault location for log file would be `$XDG_RUNTIME_DIR/node-client.log`.\n\nUse `$NODE_CLIENT_LOG_FILE` to specify full path of the log.\n\nUse `$NODE_CLIENT_LOG_LEVEL` to specify the log level, which default to `info`,\ncould also be `debug` or `trace`.\n\nUse `let g:node_client_debug = 1` in vim8 to enable logfile of vim8, use\n`:call nvim#rpc#open_log()` to open vim8 logfile.\n\n### Usage through node REPL\n\nNote, it only works with neovim, you also need build this module from source code.\n\n#### `NVIM_LISTEN_ADDRESS`\n\nFirst, start Nvim with a known address (or use the \\$NVIM_LISTEN_ADDRESS of a running instance):\n\n    NVIM_LISTEN_ADDRESS=/tmp/nvim nvim\n\nIn another terminal, cd to root of this module then start node REPL by:\n\n    NVIM_LISTEN_ADDRESS=/tmp/nvim node\n\nconnect to Nvim:\n\n```javascript\nlet nvim\n// `scripts/nvim` will detect if `NVIM_LISTEN_ADDRESS` is set and use that unix socket\nrequire('./scripts/nvim').then(n => (nvim = n))\n\nnvim.command('vsp')\n```\n\n## LICENSE\n\nMIT\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@chemzqm/neovim/-/neovim-5.7.9.tgz#78cb54d07d8e24533177140371e3ac1d694ff5f7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@chemzqm/neovim/-/neovim-5.7.9.tgz",
    "hash": "78cb54d07d8e24533177140371e3ac1d694ff5f7",
    "integrity": "sha512-ou2lI650Rh+/3tS8HuiVim73RJSkCoVqJsf+Mqyw17+CGxbcCmXQqA2stT81j3QAXsbCF+5Ro/z152TrQLUUBg==",
    "registry": "npm",
    "packageName": "@chemzqm/neovim",
    "cacheIntegrity": "sha512-ou2lI650Rh+/3tS8HuiVim73RJSkCoVqJsf+Mqyw17+CGxbcCmXQqA2stT81j3QAXsbCF+5Ro/z152TrQLUUBg== sha1-eMtU0H2OJFMxdxQDceOsHWlP9fc="
  },
  "registry": "npm",
  "hash": "78cb54d07d8e24533177140371e3ac1d694ff5f7"
}