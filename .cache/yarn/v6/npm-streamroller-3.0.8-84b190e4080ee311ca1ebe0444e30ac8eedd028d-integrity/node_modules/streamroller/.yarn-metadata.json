{
  "manifest": {
    "name": "streamroller",
    "version": "3.0.8",
    "description": "file streams that roll over when size limits, or dates are reached",
    "main": "lib/index.js",
    "files": [
      "lib",
      "CHANGELOG.md"
    ],
    "scripts": {
      "codecheck": "eslint \"lib/*.js\" \"test/*.js\"",
      "prepublishOnly": "npm test",
      "pretest": "npm run codecheck",
      "clean": "rm -rf node_modules/",
      "test": "nyc --check-coverage mocha",
      "html-report": "nyc report --reporter=html"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/nomiddlename/streamroller.git"
    },
    "keywords": [
      "stream",
      "rolling"
    ],
    "author": {
      "name": "Gareth Jones",
      "email": "gareth.nomiddlename@gmail.com"
    },
    "license": "MIT",
    "readmeFilename": "README.md",
    "gitHead": "ece35d7d86c87c04ff09e8604accae81cf36a0ce",
    "devDependencies": {
      "@commitlint/cli": "^16.2.3",
      "@commitlint/config-conventional": "^16.2.1",
      "@types/node": "^17.0.26",
      "eslint": "^8.14.0",
      "husky": "^7.0.4",
      "mocha": "^9.2.2",
      "nyc": "^15.1.0",
      "proxyquire": "^2.1.3",
      "should": "^13.2.3"
    },
    "dependencies": {
      "date-format": "^4.0.9",
      "debug": "^4.3.4",
      "fs-extra": "^10.1.0"
    },
    "engines": {
      "node": ">=8.0"
    },
    "commitlint": {
      "extends": [
        "@commitlint/config-conventional"
      ]
    },
    "eslintConfig": {
      "env": {
        "browser": false,
        "node": true,
        "es6": true,
        "mocha": true
      },
      "parserOptions": {
        "ecmaVersion": 2018
      },
      "extends": "eslint:recommended",
      "rules": {
        "no-console": "off"
      }
    },
    "husky": {
      "hooks": {
        "commit-msg": "commitlint -e $HUSKY_GIT_PARAMS"
      }
    },
    "nyc": {
      "include": [
        "lib/**"
      ],
      "branches": 100,
      "lines": 100,
      "functions": 100
    },
    "_registry": "npm",
    "_loc": "/home/ditya/.cache/yarn/v6/npm-streamroller-3.0.8-84b190e4080ee311ca1ebe0444e30ac8eedd028d-integrity/node_modules/streamroller/package.json",
    "readme": "streamroller [![CodeQL](https://github.com/log4js-node/streamroller/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/log4js-node/streamroller/actions/workflows/codeql-analysis.yml) [![Node.js CI](https://github.com/log4js-node/streamroller/actions/workflows/node.js.yml/badge.svg)](https://github.com/log4js-node/streamroller/actions/workflows/node.js.yml)\n============\n\n[![NPM](https://nodei.co/npm/streamroller.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/streamroller/)\n\nnode.js file streams that roll over when they reach a maximum size, or a date/time.\n\n```sh\nnpm install streamroller\n```\n\n## usage\n\n```javascript\nvar rollers = require('streamroller');\nvar stream = new rollers.RollingFileStream('myfile', 1024, 3);\nstream.write(\"stuff\");\nstream.end();\n```\n\nThe streams behave the same as standard node.js streams, except that when certain conditions are met they will rename the current file to a backup and start writing to a new file.\n\n### new RollingFileStream(filename [, maxSize, numBackups, options])\n* `filename` \\<string\\>\n* `maxSize` \\<integer\\> - defaults to `MAX_SAFE_INTEGER` - the size in bytes to trigger a rollover\n* `numBackups` \\<integer\\> - defaults to `1` - the number of old files to keep (excluding the hot file)\n* `options` \\<Object\\>\n  * `encoding` \\<string\\> - defaults to `'utf8'`\n  * `mode` \\<integer\\> - defaults to `0o600` (see [node.js file modes](https://nodejs.org/dist/latest-v12.x/docs/api/fs.html#fs_file_modes))\n  * `flags` \\<string\\> - defaults to `'a'` (see [node.js file flags](https://nodejs.org/dist/latest-v12.x/docs/api/fs.html#fs_file_system_flags))\n  * `compress` \\<boolean\\> - defaults to `false` - compress the backup files using gzip (backup files will have `.gz` extension)\n  * `keepFileExt` \\<boolean\\> - defaults to `false` - preserve the file extension when rotating log files (`file.log` becomes `file.1.log` instead of `file.log.1`).\n  * `fileNameSep` \\<string\\> - defaults to `'.'` - the filename separator when rolling. e.g.: abc.log`.`1 or abc`.`1.log (keepFileExt)\n\nThis returns a `WritableStream`. When the current file being written to (given by `filename`) gets up to or larger than `maxSize`, then the current file will be renamed to `filename.1` and a new file will start being written to. Up to `numBackups` of old files are maintained, so if `numBackups` is 3 then there will be 4 files:\n<pre>\n     filename\n     filename.1\n     filename.2\n     filename.3\n</pre>\nWhen filename size >= maxSize then:\n<pre>\n     filename -> filename.1\n     filename.1 -> filename.2\n     filename.2 -> filename.3\n     filename.3 gets overwritten\n     filename is a new file\n</pre>\n\n### new DateRollingFileStream(filename [, pattern, options])\n* `filename` \\<string\\>\n* `pattern` \\<string\\> - defaults to `yyyy-MM-dd` - the date pattern to trigger rolling (see below)\n* `options` \\<Object\\>\n  * `encoding` \\<string\\> - defaults to `'utf8'`\n  * `mode` \\<integer\\> - defaults to `0o600` (see [node.js file modes](https://nodejs.org/dist/latest-v12.x/docs/api/fs.html#fs_file_modes))\n  * `flags` \\<string\\> - defaults to `'a'` (see [node.js file flags](https://nodejs.org/dist/latest-v12.x/docs/api/fs.html#fs_file_system_flags))\n  * `compress` \\<boolean\\> - defaults to `false` - compress the backup files using gzip (backup files will have `.gz` extension)\n  * `keepFileExt` \\<boolean\\> - defaults to `false` - preserve the file extension when rotating log files (`file.log` becomes `file.2017-05-30.log` instead of `file.log.2017-05-30`).\n  * `fileNameSep` \\<string\\> - defaults to `'.'` - the filename separator when rolling. e.g.: abc.log`.`2013-08-30 or abc`.`2013-08-30.log (keepFileExt)\n  * `alwaysIncludePattern` \\<boolean\\> - defaults to `false` - extend the initial file with the pattern\n  * <strike>`daysToKeep`</strike> `numBackups` \\<integer\\> - defaults to `1` - the number of old files that matches the pattern to keep (excluding the hot file)\n  * `maxSize` \\<integer\\> - defaults to `MAX_SAFE_INTEGER` - the size in bytes to trigger a rollover\n\nThis returns a `WritableStream`. When the current time, formatted as `pattern`, changes then the current file will be renamed to `filename.formattedDate` where `formattedDate` is the result of processing the date through the pattern, and a new file will begin to be written. Streamroller uses [date-format](http://github.com/nomiddlename/date-format) to format dates, and the `pattern` should use the date-format format. e.g. with a `pattern` of `\"yyyy-MM-dd\"`, and assuming today is August 29, 2013 then writing to the stream today will just write to `filename`. At midnight (or more precisely, at the next file write after midnight), `filename` will be renamed to `filename.2013-08-29` and a new `filename` will be created. If `options.alwaysIncludePattern` is true, then the initial file will be `filename.2013-08-29` and no renaming will occur at midnight, but a new file will be written to with the name `filename.2013-08-30`. If `maxSize` is populated, when the current file being written to (given by `filename`) gets up to or larger than `maxSize`, then the current file will be renamed to `filename.pattern.1` and a new file will start being written to. Up to `numBackups` of old files are maintained, so if `numBackups` is 3 then there will be 4 files:\n<pre>\n     filename\n     filename.20220131.1\n     filename.20220131.2\n     filename.20220131.3\n</pre>\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2013 Gareth Jones\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/streamroller/-/streamroller-3.0.8.tgz#84b190e4080ee311ca1ebe0444e30ac8eedd028d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/streamroller/-/streamroller-3.0.8.tgz",
    "hash": "84b190e4080ee311ca1ebe0444e30ac8eedd028d",
    "integrity": "sha512-VI+ni3czbFZrd1MrlybxykWZ8sMDCMtTU7YJyhgb9M5X6d1DDxLdJr+gSnmRpXPMnIWxWKMaAE8K0WumBp3lDg==",
    "registry": "npm",
    "packageName": "streamroller",
    "cacheIntegrity": "sha512-VI+ni3czbFZrd1MrlybxykWZ8sMDCMtTU7YJyhgb9M5X6d1DDxLdJr+gSnmRpXPMnIWxWKMaAE8K0WumBp3lDg== sha1-hLGQ5AgO4xHKHr4EROMKyO7dAo0="
  },
  "registry": "npm",
  "hash": "84b190e4080ee311ca1ebe0444e30ac8eedd028d"
}